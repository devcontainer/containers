version: "3.6"
volumes:
  dap-postgres:
services:
  zookeeper:
    image: debezium/zookeeper:${DEBEZIUM_VERSION:-0.8}
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888

  kafka:
    # image: wurstmeister/kafka:latest
    image: debezium/kafka:${DEBEZIUM_VERSION:-0.8}
    hostname: kafka
    container_name: kafka
    ports:
      - target: 9092
        published: 9092
    depends_on:
      - zookeeper
    env_file:
      - ../environment/kafka/.default.env
      - ../environment/kafka/.${ENV}.env

  postgres:
    image: postgres:${POSTGRES_VERSION:-9.6}
    hostname: postgres
    container_name: postgres
    ports:
      - 5432:5432
    env_file:
      - ../environment/postgres/.default.env
      - ../environment/postgres/.${ENV}.env
    volumes:
      - ../scripts/postgres.entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
      - ../scripts/postgres.install-plugins.sh:/docker-entrypoint-initdb.d/00-INSTALL-PLUGINS.sh
      - ../scripts/postgres.alter-role-set-search-path.sql:/docker-entrypoint-initdb.d/00-ALTER-ROLE-SET-SEARCH-PATH.sql
      - dap-postgres:/var/lib/postgresql/data

  adminer:
    image: adminer
    container_name: adminer
    hostname: adminer
    ports:
      - 8080:8080

  connect:
    image: debezium/connect:${DEBEZIUM_VERSION:-0.8}
    hostname: connect
    container_name: connect
    ports:
      - 8083:8083
    depends_on:
      - kafka
      - postgres
    environment:
      KAFKA_PORT_9092_TCP: 9092
    env_file:
      - ../environment/debezium-connect/.default.env
      - ../environment/debezium-connect/.${ENV}.env

  dap-data:
    # if it fails because of duplicate entry for in table g_flex_attrib_lov
    # run in local db `select setval('g_flex_attrib_lov_id_seq', max(id)+1, true) from g_flex_attrib_lov;`
    image: maven:3.5.2-jdk-8-slim
    hostname: dap-data
    container_name: dap-data
    volumes:
      - ${SERVICE_HOST_DIR}:/usr/src/app
      - ${HOME}/.m2:/root/.m2
    working_dir: /usr/src/app
    depends_on:
      - postgres
    links:
      - postgres:postgres
    environment:
      POSTGRES_DB: postgres
      SCHEMA: public
      STAGESCHEMA: dap_stg
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT_5432_TCP: 5432
      POSTGRES_HOST_URL: postgres
    command: mvn spring-boot:run
    # logging:
    #   driver: "none"

  sbx:
    image: ashtr/devbox:ami
    hostname: sbx
    container_name: sbx
    command: '
      zsh -c "
      mkdir -p /root/.local/lib/python3.7/site-packages/certifi/;
      if [ ! -d /go/src/github.build.ge.com/gaws ]; then 
        mkdir -p /go/src/github.build.ge.com/gaws;
        git clone git@github.build.ge.com:healthcloud/gaws.git /go/src/github.build.ge.com/gaws;
      fi;
      if ! type gaws >/dev/null 2>&1; then
        echo \"\nalias gaws=\\\"python3 /go/src/github.build.ge.com/gaws/gaws.py\\\"\" >> ~/.bash_extras;
      fi;
      echo -e \"SBX Box is ready now\";
      tail -f /dev/null;
      "
    '
    environment:
      REPO_GO_SRC_PATH: "github.com/beanstalk-test/go-server-server"
    env_file:
      - ../environment/docker/.default.env
      - ../environment/docker/.${ENV}.env
    volumes:
      - ${HOME}/.m2:/root/.m2
      - ${HOME}/go:/go
      - ${HOME}/workspace:/go/src
      - ${HOME}/.aws:/root/.aws
      - ${HOME}/.local/lib/python3.7/site-packages/certifi:/root/.local/lib/python3.7/site-packages/certifi
      - ${HOME}/.ssh:/root/.ssh
      - ${HOME}/.ssh/known_hosts:/root/.ssh/known_hosts
      - ${HOME}/.ssh/id_rsa:/root/.ssh/id_rsa
      - ${HOME}/.ssh/id_rsa.pub:/root/.ssh/id_rsa.pub
      - ${HOME}/.docker:/root/.docker
      - /var/run/docker.sock:/var/run/docker.sock
      - ${SERVICE_HOST_DIR}/:${APP_DIR}
    working_dir: ${APP_DIR}

  # dap-spring:
  #   container_name: dap-spring
  #   image: maven:3.5.2-jdk-8-slim
  #   command: >
  #     sh -c "ls; mvn clean install; mvn spring-boot:run"
  #   volumes:
  #     - ${HOME}/Spring-Kafka-ProducerConsumer:/usr/src/app
  #     - ${HOME}/.m2:/root/.m2
  #   working_dir: /usr/src/app
  #   depends_on:
  #     - kafka

  dap-audit-service:
    image: 846018127931.dkr.ecr.us-east-1.amazonaws.com/dap/dap-audit-service:latest
    hostname: dap-audit-service 
    container_name: dap-audit-service
    ports:
      - 9000:8080
    environment:
      DEPLOY_ENV: dap-dev
      POSTGRES_SERVICE_NAME: postgres-2.0
      POSTGRES_SERVICE_INSTANCE_NAME: dap-postgres
      SCHEMA: public,dap_stg
      UAA_HOST: https://27026fbc-a745-437f-906f-31fdcc86c8b2.predix-uaa.run.aws-usw02-pr.ice.predix.io
      CLIENT_CREDENTIALS: akRzSFRnWWJWdjpKQkl2MVRncWxTazJCZmVGb3p2c1hxQlI=
      TOKEN_VALIDATION: "true"
      UMTM_URL: https://umtm-services-dev.run.aws-usw02-pr.ice.predix.io
      UMTM_UAA_URL: https://27026fbc-a745-437f-906f-31fdcc86c8b2.predix-uaa.run.aws-usw02-pr.ice.predix.io
      UMTM_CLIENT_ID: jDsHTgYbVv
      UMTM_CLIENT_SECRET: JBIv1TgqlSk2BfeFozvsXqBR
      UMTM_SERVICES_CLIENT_ID: jDsHTgYbVv
      UMTM_SERVICES_CLIENT_SECRET: JBIv1TgqlSk2BfeFozvsXqBR
      UMTM_CLIENT_CREDENTIALS: akRzSFRnWWJWdjpKQkl2MVRncWxTazJCZmVGb3p2c1hxQlI=
      UMTM_TENANT_HEADER: tenant-id
      NEW_RELIC_APP_NAME: dap-audit-service-dev
      DB_URL: daptestdb.cy3ryebkcisz.us-east-1.rds.amazonaws.com
      DB_USER_NAME: dapadmin123
      DB_PASSWORD: dapadmin123
      DB_PORT: 5432
      DB_NAME: DAPTESTDB


  dap-notification-service:
    container_name: dap-notification-service
    image: maven:3.5.2-jdk-8-slim
    command: >
      sh -c "mvn spring-boot:run"
    env_file:
      - ../environment/docker/.default.env
      - ../environment/docker/.${ENV}.env
      - ../environment/dap-notification-service/.default.env
    volumes:
      - ${SERVICE_HOST_DIR}:/usr/src/app
      - ${HOME}/.m2:/root/.m2
    working_dir: /usr/src/app
    depends_on:
      - kafka
    links:
      - kafka:kafka
