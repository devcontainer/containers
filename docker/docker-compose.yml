version: "3.6"
volumes:
  dap-postgres: {}
services:
  zookeeper:
    image: debezium/zookeeper:${DEBEZIUM_VERSION:-0.8}
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888

  kafka:
    # image: wurstmeister/kafka:latest
    image: debezium/kafka:${DEBEZIUM_VERSION:-0.8}
    hostname: kafka
    container_name: kafka
    ports:
      - target: 9092
        published: 9092
    depends_on:
      - zookeeper
    env_file:
      - ../environment/kafka/.default.env
      - ../environment/kafka/.${ENV}.env

  postgres:
    image: postgres:${POSTGRES_VERSION:-9.6}
    hostname: postgres
    container_name: postgres
    ports:
      - 5432:5432
    env_file:
      - ../environment/postgres/.default.env
      - ../environment/postgres/.${ENV}.env
    volumes:
      - ../scripts/postgres.entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
      - ../scripts/postgres.install-plugins.sh:/docker-entrypoint-initdb.d/00-INSTALL-PLUGINS.sh
      - ../scripts/postgres.alter-role-set-search-path.sql:/docker-entrypoint-initdb.d/00-ALTER-ROLE-SET-SEARCH-PATH.sql
      - dap-postgres:/var/lib/postgresql/data

  adminer:
    image: adminer
    ports:
      - 8080:8080

  connect:
    image: debezium/connect:${DEBEZIUM_VERSION:-0.8}
    hostname: connect
    container_name: connect
    ports:
      - 8083:8083
    depends_on:
      - kafka
      - postgres
    environment:
      KAFKA_PORT_9092_TCP: 9092
    env_file:
      - ../environment/debezium-connect/.default.env
      - ../environment/debezium-connect/.${ENV}.env

  dap-data:
    # if it fails because of duplicate entry for in table g_flex_attrib_lov
    # run in local db `select setval('g_flex_attrib_lov_id_seq', max(id)+1, true) from g_flex_attrib_lov;`
    image: maven:3.5.2-jdk-8-slim
    hostname: dap-data
    container_name: dap-data
    volumes:
      - ${HOME}/workspace/github.build.ge.com/Digital-Asset-Passport/dap-containerized/packages/dap-data:/usr/src/app
      - ${HOME}/.m2:/root/.m2
    working_dir: /usr/src/app
    depends_on:
      - postgres
    links:
      - postgres:postgres
    environment:
      POSTGRES_DB: postgres
      SCHEMA: public
      STAGESCHEMA: dap_stg
      DATABASE_URL: "postgres:5432/postgres?currentSchema="
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    command: mvn spring-boot:run
    # logging:
    #   driver: "none"

  sbx:
    image: ashtr/fe-devbox:carbon-alpine
    hostname: sbx
    container_name: sbx
    command: tail -f /dev/null
    env_file:
      - ../environment/docker/.default.env
      - ../environment/docker/.${ENV}.env
    volumes:
      - ../:${APP_DIR}
    working_dir: ${APP_DIR}
  # dap-spring:
  #   container_name: dap-spring
  #   image: maven:3.5.2-jdk-8-slim
  #   command: >
  #     sh -c "ls; mvn clean install; mvn spring-boot:run"
  #   volumes:
  #     - ${HOME}/Spring-Kafka-ProducerConsumer:/usr/src/app
  #     - ${HOME}/.m2:/root/.m2
  #   working_dir: /usr/src/app
  #   depends_on:
  #     - kafka
